1. Create a VM
2. Install JDK 11
	sudo apt update
	sudo apt install openjdk-11-jdk
	java --version
3. Install Maven
	sudo apt update
	sudo apt install maven
	mvn -version
4. Install jenkins
	curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
  	/usr/share/keyrings/jenkins-keyring.asc > /dev/null
	
	echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
	https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  	/etc/apt/sources.list.d/jenkins.list > /dev/null

	
	sudo apt update
	sudo apt install jenkins
	sudo systemctl status jenkins
	sudo ufw allow 8080
	sudo ufw status
	sudo ufw enable
	
	Add inbound port rule for port 8080

5. Setup Jenkins
	http://ip_address_or_domain:8080  #jenkins url
	sudo cat /var/lib/jenkins/secrets/initialAdminPassword
	
	Install Suggested plugins
	set username and password

6. Install Tomcat
	sudo apt update
	sudo useradd -m -U -d /opt/tomcat -s /bin/false tomcat
	VERSION=9.0.78
	wget https://downloads.apache.org/tomcat/tomcat-9/v${VERSION}/bin/apache-tomcat-${VERSION}.tar.gz
	sudo tar -xf apache-tomcat-${VERSION}.tar.gz -C /opt/tomcat/
	sudo ln -s /opt/tomcat/apache-tomcat-${VERSION} /opt/tomcat/latest
	sudo chown -R tomcat: /opt/tomcat
	sudo sh -c 'chmod +x /opt/tomcat/latest/bin/*.sh'
	
	sudo nano /etc/systemd/system/tomcat.service
	copy following content in file...

/etc/systemd/system/tomcat.service
[Unit]
Description=Tomcat 9 servlet container
After=network.target
[Service]
Type=forking
User=tomcat
Group=tomcat
Environment="JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64"
Environment="JAVA_OPTS=-Djava.security.egd=file:///dev/urandom -Djava.awt.headless=true"
Environment="CATALINA_BASE=/opt/tomcat/latest"
Environment="CATALINA_HOME=/opt/tomcat/latest"
Environment="CATALINA_PID=/opt/tomcat/latest/temp/tomcat.pid"
Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC"
ExecStart=/opt/tomcat/latest/bin/startup.sh
ExecStop=/opt/tomcat/latest/bin/shutdown.sh
[Install]
WantedBy=multi-user.target


	sudo systemctl daemon-reload
	sudo systemctl enable --now tomcat
	sudo systemctl status tomcat

	sudo ufw allow 8088/tcp
	sudo nano /opt/tomcat/latest/conf/server.xml  === change connecter port to 8088 in server.xml file
	add inbound port rule for port 8088
	
	sudo nano /opt/tomcat/latest/webapps/manager/META-INF/context.xml
	comment out valve <!-- -->

	sudo nano /opt/tomcat/latest/conf/tomcat-users.xml
	<role rolename="manager-gui"/>
  	<user username="admin" password="admin" roles="manager-gui,manager-script"/>
  	<user username="robot" password="robot" roles="manager-script"/>

	sudo systemctl restart tomcat


7. Add Deploy to container plugins

8. Create Credentials for Tomcat Username->admin Password->admin

9. Create Jenkins pipeline using SCM ..
create Jenkinsfile in project

pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "M3"
    }

    stages {
        stage('Checkout') {
            steps {
                // Get some code from a GitHub repository
            git branch:'main',
                url:'https://gitlab.com/iconicx27/tomcatwebhookdeploy.git'

            }            
        }

        stage('Build') {
            steps{
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
                // Run Maven on a Unix agent.
                // To run Maven on a Windows agent, use
                // bat "mvn -Dmaven.test.failure.ignore=true clean package"
        }

        stage('Deploy') {
            steps {
                echo "Deploy stage started >>>>"
                deploy adapters: [tomcat9 (
                    credentialsId: 'tomcatID',
                    path: '',
                    url: 'http://52.146.19.45:8088/'
                )],
                contextPath: 'servletjar_myapp',
                onFailure: 'false',
                war: '**/*.war'
            }
            
            post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
                success {
                    junit '**/target/surefire-reports/TEST-*.xml'
                    archiveArtifacts 'target/*.war'
                }
            }
        }
    }
}

10. Creating a webhook...

Add Gitlab plugin to Jenkins..

go to gitlab->settings->webhook
add webhook
give url from project
and secret token

test webhook
